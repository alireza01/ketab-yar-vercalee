// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum ReadingLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  books         Book[]
  vocabulary    Vocabulary[]
  profile       Profile?
  readingProgress ReadingProgress[]
  bookmarks     Bookmark[]
  highlights    Highlight[]
  notes         Note[]
  authLogs      AuthLog[]
  geminiApiKeys GeminiApiKey[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id        String   @id @default(cuid())
  bio       String?  @db.Text
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  slug  String @unique
  books Book[]
}

model Author {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  bio   String? @db.Text
  books Book[]
}

model Book {
  id              String   @id @default(cuid())
  title           String
  description     String?  @db.Text
  coverImage      String?
  content         String?  @db.Text
  authorId        String
  author          Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  readingProgress ReadingProgress[]
  bookmarks       Bookmark[]
  highlights      Highlight[]
  notes           Note[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Vocabulary {
  id          String       @id @default(cuid())
  word        String
  meaning     String
  explanation String       @db.Text
  level       VocabularyLevel
  book        Book         @relation(fields: [bookId], references: [id])
  bookId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   User         @relation(fields: [createdById], references: [id])
  createdById String
}

model ReadingProgress {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  progress Int @default(0) // 0-100

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bookId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}

model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  position Int // Scroll position

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bookId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Highlight {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bookId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Note {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String @db.Text
  note String @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bookId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model AuthLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action  String
  details Json?
}

enum VocabularyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model GeminiApiKey {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  errorLogs   ApiErrorLog[]
}

model ApiErrorLog {
  id          String   @id @default(cuid())
  apiKeyId    String
  apiKey      GeminiApiKey @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  error       String   @db.Text
  statusCode  Int?
  timestamp   DateTime @default(now())
  resolved    Boolean  @default(false)
}

model TranslationPrompt {
  id          String   @id @default(cuid())
  name        String
  prompt      String   @db.Text
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
